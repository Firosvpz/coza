const verifyPayment = async (req, res) => {
    try {
        const cartData = await Cart.findOne({ user_id: req.session.user_id });
        const cartProducts = cartData.items;
        const details = req.body;

        const crypto = require("crypto");
        // Your secret key from the environment variable
        const secretKey = process.env.RAZORPAY_SECRET_KEY;

        // Creating an HMAC with SHA-256
        const hmac = crypto.createHmac("sha256", secretKey);

        // Updating the HMAC with the data
        hmac.update(
            details.payment.razorpay_order_id +
            "|" +
            details.payment.razorpay_payment_id
        );

        // Getting the hexadecimal representation of the HMAC
        const hmacFormat = hmac.digest("hex");

        if (hmacFormat == details.payment.razorpay_signature) {
            await Order.findByIdAndUpdate(
                { _id: details.order.receipt },
                { $set: { paymentId: details.payment.razorpay_payment_id } }
            );

            for (let i = 0; i < cartProducts.length; i++) {
                let count = cartProducts[i].quantity; await products.findByIdAndUpdate({
                    _id: cartProducts[i].product_id
                },
                    { $inc: { quantity: -count } });
            }


            await Order.findByIdAndUpdate({ _id: details.order.receipt }, { $set: { status: "placed" } });


            const userData = await User.findOne({ _id: req.session.user_id });
            await Cart.deleteOne({ user_id: userData._id });

            res.json({ success: true, params: details.order.receipt });
        } else {
            await Order.findByIdAndDelete({ _id: details.order.receipt });
            res.json({ success: false });
        }
    } catch (error) {
        console.log(error.message);
    }
};