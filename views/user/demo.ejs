// Otp verification
const verifyOtp = async (req, res) => {
    const email = req.body.email;
    const otp = req.body.one + req.body.two + req.body.three + req.body.four;
    const user = await userOtp.findOne({ email: email });

    if (!user) {
        res.render('otp', { message: 'otp expired', email: email })
        return;
    }
    const { otp: hashedOtp } = user;
    const validOtp = await bcrypt.compare(otp, hashedOtp);


    if (validOtp == true) {
        const userData = await User.findOne({ email: email })
        await User.findByIdAndUpdate({ _id: userData._id }, { $set: { verified: true } });
        await userOtp.deleteOne({ email: email });

        req.session.userId = userData._id
        if (req.session.referralCode) {
            await User.findOneAndUpdate(
                { referralCode: req.session.referralCode },
                {
                    $inc: { wallet: 100 },
                    $push: {
                        wallet_history: {
                            date: new Date(),
                            amount: 100,
                            description: Referral Bonus for referring  ${userData.username}
                        }
                    }
                }
            );
            await User.findOneAndUpdate(
                { _id: req.session.userId },
                {
                    $inc: { wallet: 50 },
                    $push: {
                        wallet_history: {
                            date: new Date(),
                            amount: 50,
                            description: Welcome Bonus For using referral link
                        }
                    }
                }
            );
        }
        req.session.referralCode = null;
        req.session.userId = null
        res.redirect('/login');
    } else {
        // res.render('otp', { email: email, message: 'otp is incorrect' })
        req.flash('message', 'Incorrect OTP');
        res.redirect(/otp?email=${email})
    }
}
//Register Verify
const verifyRegister = async (req, res) => {
    try {
        const { username, email, mobile, password, confirmPassword, code } = req.body;
        if (code) {
            req.session.referralCode = code;
        }
        // Check if email already exists
        const existingUser = await User.findOne({ email: email });
        if (existingUser) {
            return res.status(400).render('register', { message: 'Email is already registered' })
        }

        if (password !== confirmPassword) {
            return res.status(400).send({ error: "Passwords do not match" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const referralCode = generateReferralCode();

        // Create new user
        const newUser = new User({
            username,
            email,
            mobile,
            password: hashedPassword,
            verified: false,
            isAdmin: 0,
            referralCode: referralCode
        });

        await newUser.save();
        sendOtpVerification(newUser, res);
    } catch (error) {
        console.error(error);
        res.status(500).send({ error: "Internal server error" });
    }
};
function generateReferralCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}